객체와 클래스
- 객체를 생성하는 것은 다 알죠.
자료형 변수명 = new 자료형( );
객체.변수
객체.상수
객체.메서드

객체.get메서드( ).
=====
클래스
- 멤버변수, 생성자, 메서드
- 객체의 설계도
- class 키워드가 있어야 클래스입니다.
- 객체의 구성요소를 표현
- 객체 생성 방법(=참조자료형의 자료형에 맞는 값을 제공), 멤버변수 초기화
- 객체의 기능을 표현.
=====
public class Test{
	private int a;
	public Test( ){
	}
	public Test(int a){
		this.a = a;
	}

	public void fight(Test otherTeam){
		sysout(this.a > otherTeam.a);
	}
}

=====

Test t1 = new Test(3);
Test t2 = new Test(4);
Test t3 = t1;

1. Test클래스로 만들어진 객체(=인스턴스)의 개수는 몇 개인가? 2 개
2. 생성된 객체는 무엇인가?

3. 현재 t1, t2, t3에서 생성된 인스턴스변수의 개수는 몇 개인가?





==연산자

대입연산자: =, 우측의 값을 왼쪽에 대입하라.
a = b;
a = 4; 

+: 문자열과의 덧셈이 가능함
-: 
int a=0;
a = 1-a;
*:
/: 몫   1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 
(n/3) +1
%: 나머지
1. 배수인지 여부 확인할 때:
2. 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4
n%5
1, 2,3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5
n%5 +1

====

a += b  //a = a+b
-=
*=
/=
%=
==================================
논리연산자:
- &&: 연산에 참여하는 데이터가 모두 true일 때만 true, 
       그렇지 않으면 false
- ||: 연산에 참여하는 데이터에 하나라도 true가 있으면 true,
     모든 데이터가 false이면 false
- !: 데이터의 값을 반전시킴. true -> false, false -> true



=
+, -, *, /, %
+=, -=, *=, /=, %=
>, >=, <, <=, ==, !=
&&, ||, !
++, --: 1씩 증감




++a;
++이 변수 앞에 오면, 
변수의 값이 1만큼 증가합니다.
그리고 그 증가된 값은 곧바로 변수에 대입됩니다.

====
b++;
++이 변수 뒤에 오면,
변수의 값이 1만큼 증가합니다.
그러나 그 증가된 값은 나중에 해당 변수를 호출할 때 대입됩니다.



IT는 굉장히 진보적이죠,.
생각은 진보적이나
코드는 보수적입니다.

단항연산자
int a=0;
int b=0;
++a;
b++;

sysout(a);1
sysout(b);1

=============================
=
+, -, *, /, %
+=, -=, *=, /=, %=
>, >=, <, <=, ==, !=
&&, ||, !
++, --
조건(=삼항)연산자

변수명 = 3 > 4 ? "hello" : "no";
(자료형) 변수명 = 조건식 ? 참일 때의 값 : 거짓일 때의 값;



int a = 3;
int b = 5;
정수형 변수 c의 값은 
a가 b와 같으면 
44이고 
그렇지 않으면 33이다.
변수 c를 선언하시오. 
int c = a==b? 44 : 33;


A B C D F


=
+, -, *, /, %
+=, -=, *=, /=, %=
>, >=, <, <=, ==, !=
&&, ||, !
++, --
삼항연산자
---
전자제품 만들 때 사용하는

c언어...
1. 비트연산자
   &, |, ^, ~(부호반전: 양수 -> 음수일 때는 +1, 음수 -> 양수일 때는 -1)
2. 시프트연산자
  >>, <<
~(0000000 00000000 00000000 00001110)

























































