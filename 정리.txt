static 변수 , 상수, 메서드
==
class 변수, 상수 , 메서드
------------------------
프로그램이 실행되면, 곧바로 static영역에 로딩이 되어
실행 가능한 상태가 됩니다.
====================
인스턴스 변수 : 객체 생성 시마다 만들어지기 때문에 인스턴스
static 변수/상수 : 객체 생성 개수와 상관 없이 무조건 1개만 생성됨.

어떻게 만들까?
static 변수는 어떻게 만들까?
public static type 변수명;
public static int a;




return의 기능
1. 값 반환의 의미
2. 메서드 실행 중단 return;

break : 가장 가까운 반복문을 빠져나감.
continue : 해당 회차를 빠져나감.



switch case : ==, int, String, enum
    break




연산자
=
+ - / * %                                               스위치   :  int a = 1;
0 0 0 1 1 1 2 2 2 3 3 3    >> n/3                             a = 1-a; 
0 1 2 3 0 1 2 3 0 1 2 3   >> n%4
a +- b // a = a+b;
a -= b //a = a-b;
a *= b // a = a*b;
a /= b // a = a/b;
a %= b // a = a%b;

> >= < <= == != : boolean

&&  ||  !
&& : 연산에 참여하는 데이터가 모두 true일 때만 true 아니면 false



if문 (상황에 따라 실행코드를 달리하고 싶을 때, ~면, ~라면, ~이면)
- 단순if : ~면 ~해라.
- if ~ else : ~면 ~해라, 그렇지않으면 ~해라.
-다중 if : ~해라, 그렇지않으면 ~하고, 그렇지않고 ~면 ~해라,그렇지않으면 ~해라



|| : 연산에 참여하는 데이터가 모두 false일 때만 flase 아니면 true
! : 값 반전

++, -- : 1씩 증감.
++a , --a : 즉시 증감돼서 a에 대입.
a++, a-- : 나중에 a를 만났을 때 대입.

& | ^ ~

>>, <<

조건연산자(=삼항연산자)
type 변수명 = 조건식? 참일 때의 값 : 거짓일 때의 값;
type 변수명 = 조건식1? 참일 때의 값1 : 조건식2? 참일 때의 값2 : 
                    조건 1, 2 가 모두 거짓일 때의 값;


참조자료형의 변수(=객체=인스턴스)가 갖고 있는 자원에 접근하려면?
객체명.

클래스와 객체 
1. 객체 : 국어 사전에서 명사. 힙메모리에 저장된 데이터. 실체.
- 참조자료형 객체명 = new 생성자();
- 힙메모리에 저장.
- 참조자료형으로 만들어짐.
  객체가 갖고 있는 자원에 접근 또는 사용할 때 ..
객체명.변수명;
객체명.상수명;
객체명.메서드명;

2. 클래스 : 설계도의 의미. class라는 키워드가 있어야 클래스.
클래스는 단독으로 실행되지않는다>> 객체를 만들어서 실행.
클래스의 구성 요소 : 멤버변수/상수, 생성자, 메서드

객체의 구성 요소를 표현 자료 : 멤버변수/상수
객체의 생성법을 표현하는 자료 : 생성자
객체의 기능을 표현하는 자료 : 메서드



생성자 : 객체 생성 시 값을 제공, 멤버변수 초기화
- 디폴트 생성자 : 파라미터가 없으면
- 사용자 생성자 : 파라미터가 있으면

생성자가 눈에 안 보인다 : 생성자 몇개 있나? 1개..디폴트 생성자 존재
사용자생성자 2개가 눈에 보인다 : 생성자 2개.. 디폴트 생성자는 없다..
                                                                직접 입력해야..
동적인 객체를 만들고 싶다 >> 사용자 생성자
public 클래스명(){}
this : 객체 자기 자신.
       지역변수와 멤버변수의 변수명이 같을 때, 지역변수를 우선적으로 인식.
this (): 해당 클래스의 생성자 호출..
this(3);
this(new Dog());
생성자의 첫 라인에 작성해야 함.



메서드오버로딩 : 같은클래스 메서드 이름 같음.
파라미터의 자료형과 관련되어 있음.
접근제한자x, 반환형x, 파라미터의 변수명x
1. 메서드의 파라미터의 개수가 다르면 성립.
2. 메서드의 파라미터의 자료형이 다르면 성립.
3. 메서드의 파라미터의 자료형의 배치 순서가 다르면 성립.




메서드 : 객체의 기능(=능력=행위)표현
public 반환형 메서드명(자료형1 변수명, 자료형2 변수명2){
                 
      // return 자료형에 맞는 값; 반환형이 void가 아닐 때...
   }
-무반환 무파람 : 메서드명()
-무반환 유파람 : set(), 메서드명(자료형에 맞는값1, 자료형에 맞는값2)
-유반환 무파람 : get(), 반환형과 같은 자료형 = 메서드명();
-유반환 유파람 : 
반환형과 같은 자료형 변수명 = 메서드명(자료형에 맞는값1, 자료형에 맞는값2)





지역변수 VS 멤버변수
1. 지역변수 : 메서드나 생성자 안에서 선언된 변수.
                  스코프 : 선언된순간 ~ 가장 가까운 { 까지.
                  자료형 변수명 = 자료형에 맞는 값;  >> 선언과 초기화
                  자료형 변수명 ; >> 변수 선언
                  변수명 = 자료형에 맞는 값; >> 대입.. 선언이 있어야함
                  멤버변수명  = 자료형에 맞는 값. 생성자에 있으면 초기화.

2. 멤버변수 : 클래스의 필드에 선언.. 스코프 : 해당 클래스 전체.
                  private 자료형 변수명;
                  초기화는 생성자 안에서 이뤄짐.
                  객체의 구성 요소 역할을 하고 클래스의 구성 요소
                             